Итератор по RLE. 2024
Ограничение времени	4 секунды
Ограничение памяти	64.0 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Написать модуль, содержащий реализацию класса RleSequence для кодирования длин серий (Run-length encoding). Класс должен включать/перегружать следующие методы:

__init__(self, input_sequence) — конструктор класса. По входному вектору input_sequence строится два вектора одинаковой длины. Первый содержит числа, а второй — сколько раз их нужно повторить. Для реализации рекомендуется использовать функцию encode_rle из второго домашнего задания. Кроме этих двух векторов в классе запрещается хранить любые объекты, размер которых зависит от длины исходного вектора.
input_sequence — одномерный numpy.array
Экземпляры класса должны поддерживать протокол итераций, причём порядок элементов, выдаваемый в процессе итерирования по экземпляру RleSequence, должен совпадать с порядком элементов в исходном input_sequence, который подавался в конструктор класса. Экземпляры должны поддерживать простое индексирование (положительные и отрицательные целые индексы) и взятие срезов с положительным шагом (третий параметр). Экземпляры должны поддерживать проверку на вхождение (in и not in).

Пример правильно работающего класса:

>>> rle_seq = RleSequence(np.array([1, 1, 2, 2, 3, 4, 5]))
>>> rle_seq[4]
3
>>> rle_seq[1:5:2]
array([1, 2])
>>> rle_seq[1:-1:3]
array([1, 3])
>>> 5 in rle_seq
True
>>> list(rle_seq)
[1, 1, 2, 2, 3, 4, 5]
Замечание. Некоторые операторы и функции перегружаются автоматически при определении других. Тем не менее, часто собственная реализация может работать эффективнее, чем созданная по умолчанию.