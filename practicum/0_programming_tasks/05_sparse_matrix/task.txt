Разреженные матрицы. 2023 [cloned]
Ограничение времени	1.5 секунд
Ограничение памяти	10.0 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Реализуйте класс CooSparseMatrix, который реализует разреженную матрицу с координатным форматом хранения. В памяти должны хранится только ненулевые элементы матрицы, то есть затраты по памяти должны составлять 
O
(
n
)
O(n), где 
n
n — число ненулевых элементов матрицы.

Условия:

Конструктор класса (метод __init__) принимает два аргумента:

ijx_list — список кортежей (i, j, x), где i, j — координаты элемента в матрице, x — значение элемента;
shape — кортеж из двух элементов, размер матрицы.
Необходимо выбрасывать исключение TypeError в случаях, когда в метод __init__ приходят любые некорректные данные (продумайте такие сценарии самостоятельно).

 matrix = CooSparseMatrix(
     ijx_list=[
         (0, 0, 1),
         (1, 0, 2)
     ], shape=(2, 2)
 )
 
Необходимо реализовать простую индексацию матриц. При вызове matrix[i] необходимо вернуть объект CooSparseMatrix, соответствующий строке с номером i (нумерация с нуля) в исходной матрице размера 
1
1 на количество столбцов в матрице. При вызове matrix[i, j] необходимо вернуть элемент матрицы с координатами i, j. Также реализуйте возможность присвоить элементу матрицы с координатами i, j вещественное число.

Необходимо выбрасывать исключение TypeError в случаях, когда в методы индексации приходят любые некорректные данные (продумайте такие сценарии самостоятельно).

 matrix = CooSparseMatrix(
     ijx_list=[
         (0, 0, 1),
         (1, 0, 2)
     ], shape=(2, 2)
 )

 to_array(matrix[0])
 >>> array([[1., 0.]])

 matrix[0, 0]
 >>> 1

 matrix[1, 1] = 3
 matrix[1, 1]
 >>> 3
 




Замечание: Также рекомендуется реализовать для себя функцию или метод to_array, который преобразует разреженную матрицу в привычный вид - список списков.

matrix = CooSparseMatrix(
    ijx_list=[
        (0, 0, 1),
        (1, 0, 2)
    ], shape=(2, 2)
)

to_array(matrix)
>>> array([[1., 0.],
           [2., 0.]])