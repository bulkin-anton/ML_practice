Полиномы. 2024
Ограничение времени	1 секунда
Ограничение памяти	64.0 Мб
Ввод	стандартный ввод или input.txt
Вывод	стандартный вывод или output.txt
Реализуйте модуль polynomial.py, содержащий класс Polynomial, который описывает полином. Конструктор класса (метод __init__) принимает неограниченное число аргументов, каждый из которых является коэффициентом полинома. Номер аргумента соответствует степени монома, к которому относится данный коэффициент (нумерация с нуля).

Например, Polynomial(2, 3, 1) задает полином 
2
+
3
x
+
x
2
2+3x+x2.

Класс должен удовлетворять следующим требованиям:

Объект класса моделирует конкретный полином. При вызове объекта класса от вещественной переменной x, возвращается значение полинома в точке x. Например:

  polynom = Polynomial(2, 3, 1)
  print(polynom(4))
  >>> 30
  
Объекты класса должны иметь атрибут coefs, содержащий список коэффициентов:

  polynom = Polynomial(2, 3, 1)
  print(polynom.coefs)
  >>> [2, 3, 1]
  
Атрибут coefs должен поддерживать присваивание списков и кортежей. При попытке присвоить объект другого типа должно выбрасываться исключение TypeError:

  polynom = Polynomial(2, 3, 1)
  polynom.coefs = [1, 2]
  print(polynom.coefs)
  >>> [1, 2]
  
Объекты класса должны поддерживать изменение как отдельных коэффициентов, так и их диапазонов:

  polynom = Polynomial(2, 3, 1, 4, 5)
  polynom[0] = 10
  polynom[1::2] = [-1, -2]
  print(polynom.coefs)
  >>> [10, -1, 1, -2, 5]
  
Также, реализуйте класс-наследник IntegerPolynomial для моделирования многочлена с целыми коэффициентами. Класс должен автоматически округлять коэффициенты при создании класса и при непосредственном изменении коэффициентов:

integer_polynom = IntegerPolynomial(2, 3.5, 1)
print(integer_polynom(1))
>>> 7
integer_polynom[2] = -1.2
print(integer_polynom.coefs)
>>> [2, 4, -1]




Замечание 1: Для реализации атрибута coefs можете использовать дескрипторы, @property или перегрузку магических методов.

Замечание 2: Округление можно выполнять с помощью встроенной функции round.